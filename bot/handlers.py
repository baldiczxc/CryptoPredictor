from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext

from config import POPULAR_SYMBOLS, INTERVALS, logger
from bot.states import UserStates
from utils.formatters import format_prediction_result

class Handlers:
    def __init__(self, crypto_bot):
        self.crypto_bot = crypto_bot
        self.router = Router()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.router.message(CommandStart())(self.cmd_start)
        self.router.message(Command("help"))(self.cmd_help)
        self.router.message(Command("predict"))(self.cmd_predict)
        self.router.message(Command("symbols"))(self.cmd_symbols)
        self.router.message(Command("stats"))(self.cmd_stats)
        self.router.message(Command("settings"))(self.cmd_settings)
        
        self.router.callback_query()(self.process_all_callbacks)
        
        self.router.message(UserStates.waiting_symbol)(self.process_custom_symbol)
        self.router.message(UserStates.waiting_support_request)(self.process_support_request)
        self.router.message(UserStates.waiting_feedback)(self.process_feedback)
    
    async def cmd_start(self, message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = await self.crypto_bot.db.get_user(message.from_user.id)
        
        await self.crypto_bot.db.update_user(message.from_user.id, {
            'username': message.from_user.username or '',
            'first_name': message.from_user.first_name or ''
        })
        
        welcome_text = (
            f"üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoPredictionBot!</b>\n\n"
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
            f"–Ø –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è "
            f"–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n\n"
            f"<b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
            f"üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
            f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã\n"
            f"üí° –î–∞–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
            f"üì± –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥!"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìà –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="predict_main")],
            [InlineKeyboardButton(text="üìã –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", callback_data="symbols_popular")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_main")]
        ])
        
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode='HTML')
    
    async def cmd_help(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = (
            "<b>ü§ñ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ CryptoPredictionBot</b>\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/predict - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑\n"
            "/symbols - –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤\n"
            "/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "<b>üéØ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É\n"
            "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª\n"
            "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑\n\n"
            "<b>üìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:</b>\n"
            "‚Ä¢ 15m - 15 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ 1H - 1 —á–∞—Å\n"
            "‚Ä¢ 4H - 4 —á–∞—Å–∞\n"
            "‚Ä¢ 1D - 1 –¥–µ–Ω—å\n\n"
            "<b>üí° –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:</b>\n"
            "üü¢ –ü–æ–∫—É–ø–∫–∞ - –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è —Ä–æ—Å—Ç\n"
            "üî¥ –ü—Ä–æ–¥–∞–∂–∞ - –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è –ø–∞–¥–µ–Ω–∏–µ\n"
            "üü° –û–∂–∏–¥–∞–Ω–∏–µ - –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª"
        )
        
        await message.answer(help_text, parse_mode='HTML')
    
    async def cmd_predict(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /predict"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ", callback_data="predict_popular"),
             InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Å–∏–º–≤–æ–ª–∞", callback_data="predict_search")],
            [InlineKeyboardButton(text="üìä BTC-USDT", callback_data="predict_BTC-USDT"),
             InlineKeyboardButton(text="üíé ETH-USDT", callback_data="predict_ETH-USDT")],
            [InlineKeyboardButton(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ", callback_data="predict_favorites")]
        ])
        
        await message.answer(
            "üìà <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:</b>",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    async def cmd_symbols(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /symbols"""
        text = "üìã <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã:</b>\n\n"
        
        keyboard_buttons = []
        for i, symbol in enumerate(POPULAR_SYMBOLS):
            if i % 2 == 0:
                keyboard_buttons.append([])
            keyboard_buttons[-1].append(
                InlineKeyboardButton(text=symbol, callback_data=f"predict_{symbol}")
            )
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        for symbol in POPULAR_SYMBOLS:
            text += f"‚Ä¢ {symbol}\n"
        
        text += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∏–º–≤–æ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞!"
        
        await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
    
    async def cmd_stats(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /stats"""
        user = await self.crypto_bot.db.get_user(message.from_user.id)
        
        from datetime import datetime
        joined_date = datetime.fromisoformat(user['joined_at']).strftime('%d.%m.%Y')
        
        stats_text = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user['first_name']}\n"
            f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {joined_date}\n"
            f"üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ:</b> {user['predictions_count']}\n"
            f"‚≠ê <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:</b> {', '.join(user['favorite_symbols'][:3])}\n"
            f"‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b> {INTERVALS.get(user['settings']['interval'], user['settings']['interval'])}\n"
            f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if user['settings']['notifications'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="stats_detailed")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
        
        await message.answer(stats_text, reply_markup=keyboard, parse_mode='HTML')
    
    async def cmd_settings(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /settings"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="settings_interval")],
            [InlineKeyboardButton(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", callback_data="settings_favorites")],
            [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")],
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="settings_profile")],
            [InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="settings_support")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
        
        await message.answer(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    async def process_all_callbacks(self, callback: CallbackQuery, state: FSMContext):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            if callback.data.startswith("predict_"):
                await self.process_predict_callback(callback, state)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
            elif callback.data.startswith("symbol_"):
                await self.process_symbol_callback(callback)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            elif callback.data.startswith("interval_"):
                await self.process_interval_callback(callback)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            elif callback.data.startswith("settings_"):
                await self.process_settings_callback(callback, state)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            elif callback.data.startswith("stats_"):
                await self.process_stats_callback(callback)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            elif callback.data.startswith("favorite_"):
                await self.process_favorite_callback(callback)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            elif callback.data.startswith("notification_"):
                await self.process_notification_callback(callback)
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            elif callback.data == "back_main":
                await self.back_to_main(callback)
            elif callback.data == "back_predict":
                await self.back_to_predict(callback)
            elif callback.data == "back_settings":
                await self.back_to_settings(callback)
            elif callback.data == "back_stats":
                await self.back_to_stats(callback)
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback-–æ–≤
                await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback.data}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ process_all_callbacks: {e}")
            if callback.message:
                await callback.message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
                    ]])
                )
    
    async def process_predict_callback(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        await callback.answer()
        
        if callback.data == "predict_main":
            await self.show_predict_menu(callback)
        elif callback.data == "predict_popular":
            await self.show_popular_symbols(callback)
        elif callback.data == "predict_search":
            await callback.message.edit_text(
                "üîç –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC-USDT):",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_predict")
                ]])
            )
            await state.set_state(UserStates.waiting_symbol)
        elif callback.data == "predict_favorites":
            await self.show_user_favorites(callback, callback.from_user.id)
        elif callback.data.startswith("predict_") and callback.data != "predict_main":
            symbol = callback.data.replace("predict_", "")
            await self.show_interval_selection(callback, symbol)
    
    async def show_predict_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ", callback_data="predict_popular"),
             InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Å–∏–º–≤–æ–ª–∞", callback_data="predict_search")],
            [InlineKeyboardButton(text="üìä BTC-USDT", callback_data="predict_BTC-USDT"),
             InlineKeyboardButton(text="üíé ETH-USDT", callback_data="predict_ETH-USDT")],
            [InlineKeyboardButton(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ", callback_data="predict_favorites")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
        
        await callback.message.edit_text(
            "üìà <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:</b>",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    async def show_popular_symbols(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"""
        keyboard_buttons = []
        for i, symbol in enumerate(POPULAR_SYMBOLS):
            if i % 2 == 0:
                keyboard_buttons.append([])
            keyboard_buttons[-1].append(
                InlineKeyboardButton(text=symbol, callback_data=f"symbol_{symbol}")
            )
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_predict")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            "‚≠ê <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã:</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    async def process_symbol_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–∞"""
        await callback.answer()
        symbol = callback.data.replace("symbol_", "")
        await self.show_interval_selection(callback, symbol)
    
    async def show_interval_selection(self, callback: CallbackQuery, symbol: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="15m", callback_data=f"interval_{symbol}_15m"),
             InlineKeyboardButton(text="1H", callback_data=f"interval_{symbol}_1H")],
            [InlineKeyboardButton(text="4H", callback_data=f"interval_{symbol}_4H"),
             InlineKeyboardButton(text="1D", callback_data=f"interval_{symbol}_1D")],
            [InlineKeyboardButton(text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_add_{symbol}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="predict_popular")]
        ])
        
        await callback.message.edit_text(
            f"‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è {symbol}:</b>",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    async def process_interval_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        await callback.answer()
        
        parts = callback.data.replace("interval_", "").split("_")
        symbol = parts[0]
        interval = parts[1]
        
        await callback.message.edit_text(
            f"üîÑ <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol} –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ {interval}...</b>\n\n"
            f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏ –æ–±—É—á–∞—é –º–æ–¥–µ–ª—å...\n"
            f"üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã...\n"
            f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑...\n\n"
            f"<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥</i>",
            parse_mode='HTML'
        )
        
        try:
            predictor_key = f"{symbol}_{interval}"
            if predictor_key not in self.crypto_bot.predictors:
                from ml.predictor import AdvancedCryptoPredictor
                self.crypto_bot.predictors[predictor_key] = AdvancedCryptoPredictor(
                    symbol=symbol,
                    interval=interval,
                    sequence_length=30
                )
            
            predictor = self.crypto_bot.predictors[predictor_key]
            result = await predictor.predict_simple()
            
            if result:
                await self.crypto_bot.db.increment_predictions(callback.from_user.id)
                prediction_text = format_prediction_result(result)
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data=f"interval_{symbol}_{interval}")],
                    [InlineKeyboardButton(text="üìä –î—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª", callback_data="predict_popular"),
                     InlineKeyboardButton(text="‚è∞ –î—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data=f"symbol_{symbol}")],
                    [InlineKeyboardButton(text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_add_{symbol}")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                ])
                
                await callback.message.edit_text(
                    prediction_text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await callback.message.edit_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {symbol}</b>\n\n"
                    f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    f"‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
                    f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API –±–∏—Ä–∂–∏\n"
                    f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"interval_{symbol}_{interval}")],
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                    ]),
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ process_interval_callback: {e}")
            await callback.message.edit_text(
                f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ</b>\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª –∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                ]),
                parse_mode='HTML'
            )
    
    async def process_settings_callback(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await callback.answer()
        
        if callback.data == "settings_main":
            await self.show_settings_menu(callback)
        elif callback.data == "settings_interval":
            await self.show_interval_settings(callback, callback.from_user.id)
        elif callback.data.startswith("settings_set_interval_"):
            interval = callback.data.replace("settings_set_interval_", "")
            await self.update_user_interval(callback.from_user.id, interval)
            await callback.answer("‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω!")
            await self.show_settings_menu(callback)
        elif callback.data == "settings_notifications":
            await self.show_notification_settings(callback, callback.from_user.id)
        elif callback.data == "settings_notifications_toggle":
            new_state = await self.toggle_user_notifications(callback.from_user.id)
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            await callback.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}!")
            await self.show_notification_settings(callback, callback.from_user.id)
        elif callback.data == "settings_favorites":
            await self.show_user_favorites(callback, callback.from_user.id)
        elif callback.data == "settings_profile":
            await self.show_profile_settings(callback, callback.from_user.id)
        elif callback.data == "settings_support":
            await self.show_support_menu(callback)
        elif callback.data == "settings_support_request":
            await callback.message.edit_text(
                "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings_main")
                ]])
            )
            await state.set_state(UserStates.waiting_support_request)
        elif callback.data == "settings_feedback":
            await callback.message.edit_text(
                "‚≠ê –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings_main")
                ]])
            )
            await state.set_state(UserStates.waiting_feedback)
    
    async def process_stats_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await callback.answer()
        
        if callback.data == "stats_detailed":
            await self.show_detailed_stats(callback, callback.from_user.id)
        elif callback.data == "stats_main":
            await self.show_stats_menu(callback)
    
    async def process_favorite_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        await callback.answer()
        
        if callback.data.startswith("favorite_add_"):
            symbol = callback.data.replace("favorite_add_", "")
            await self.add_to_favorites(callback.from_user.id, symbol)
            await callback.answer(f"‚úÖ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=True)
        elif callback.data.startswith("favorite_remove_"):
            symbol = callback.data.replace("favorite_remove_", "")
            await self.remove_from_favorites(callback.from_user.id, symbol)
            await callback.answer(f"‚úÖ {symbol} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
            await self.show_user_favorites(callback, callback.from_user.id)
    
    async def process_notification_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        await callback.answer()
        # –ü–æ–∫–∞ –ø—É—Å—Ç–æ, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∑–∂–µ
    
    async def back_to_main(self, callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await callback.answer()
        
        welcome_text = (
            f"üöÄ <b>CryptoPredictionBot</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìà –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="predict_main")],
            [InlineKeyboardButton(text="üìã –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", callback_data="symbols_popular")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_main")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_main")]
        ])
        
        await callback.message.edit_text(
            welcome_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    async def back_to_predict(self, callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        await callback.answer()
        await self.show_predict_menu(callback)
    
    async def back_to_settings(self, callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await callback.answer()
        await self.show_settings_menu(callback)
    
    async def back_to_stats(self, callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await callback.answer()
        await self.show_stats_menu(callback)
    
    async def show_settings_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="settings_interval")],
            [InlineKeyboardButton(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", callback_data="settings_favorites")],
            [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")],
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="settings_profile")],
            [InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="settings_support")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
        
        await callback.message.edit_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    async def show_stats_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user = await self.crypto_bot.db.get_user(callback.from_user.id)
        
        from datetime import datetime
        joined_date = datetime.fromisoformat(user['joined_at']).strftime('%d.%m.%Y')
        
        stats_text = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user['first_name']}\n"
            f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {joined_date}\n"
            f"üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ:</b> {user['predictions_count']}\n"
            f"‚≠ê <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:</b> {', '.join(user['favorite_symbols'][:3])}\n"
            f"‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b> {INTERVALS.get(user['settings']['interval'], user['settings']['interval'])}\n"
            f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if user['settings']['notifications'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="stats_detailed")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
        
        await callback.message.edit_text(stats_text, reply_markup=keyboard, parse_mode='HTML')
    
    async def process_custom_symbol(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        symbol = message.text.upper().strip()
        
        if not symbol or '-' not in symbol:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞!\n\n"
                "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: BTC-USDT, ETH-USDT\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_predict")
                ]])
            )
            return
        
        await state.clear()
        
        # –°–æ–∑–¥–∞–µ–º callback-–ø–æ–¥–æ–±–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –º–µ—Ç–æ–¥
        class MockCallback:
            def __init__(self, message):
                self.message = message
                self.from_user = message.from_user
                self.answer = lambda: None
        
        mock_callback = MockCallback(message)
        await self.show_interval_selection(mock_callback, symbol)
    
    async def process_support_request(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
        await state.clear()
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        
        # –°–æ–∑–¥–∞–µ–º callback-–ø–æ–¥–æ–±–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        class MockCallback:
            def __init__(self, message):
                self.message = message
                self.from_user = message.from_user
                self.answer = lambda: None
        
        mock_callback = MockCallback(message)
        await message.reply("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
        await self.back_to_main(mock_callback)
    
    async def process_feedback(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞"""
        await state.clear()
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
        
        # –°–æ–∑–¥–∞–µ–º callback-–ø–æ–¥–æ–±–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        class MockCallback:
            def __init__(self, message):
                self.message = message
                self.from_user = message.from_user
                self.answer = lambda: None
        
        mock_callback = MockCallback(message)
        await message.reply("‚≠ê –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞!")
        await self.back_to_main(mock_callback)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async def get_user_favorites(self, user_id: int) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = await self.crypto_bot.db.get_user(user_id)
        return user.get('favorite_symbols', [])
    
    async def add_to_favorites(self, user_id: int, symbol: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        favorites = await self.get_user_favorites(user_id)
        if symbol not in favorites:
            favorites.append(symbol)
            if len(favorites) > 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏
                favorites = favorites[-10:]
            await self.crypto_bot.db.update_user_settings(user_id, {'favorite_symbols': favorites})
    
    async def remove_from_favorites(self, user_id: int, symbol: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        favorites = await self.get_user_favorites(user_id)
        if symbol in favorites:
            favorites.remove(symbol)
            await self.crypto_bot.db.update_user_settings(user_id, {'favorite_symbols': favorites})
    
    async def show_user_favorites(self, callback: CallbackQuery, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await callback.answer()
        favorites = await self.get_user_favorites(user_id)
        
        if not favorites:
            await callback.message.edit_text(
                "‚≠ê –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                "–î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –∫ –Ω–∏–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_predict")
                ]]),
                parse_mode='HTML'
            )
            return
        
        keyboard_buttons = []
        for i, symbol in enumerate(favorites):
            if i % 2 == 0:
                keyboard_buttons.append([])
            keyboard_buttons[-1].append(
                InlineKeyboardButton(
                    text=f"‚ùå {symbol}",
                    callback_data=f"favorite_remove_{symbol}"
                )
            )
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_predict")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            "‚≠ê <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∏–º–≤–æ–ª —Å ‚ùå –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    async def update_user_interval(self, user_id: int, interval: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self.crypto_bot.db.update_user_settings(user_id, {'interval': interval})
    
    async def toggle_user_notifications(self, user_id: int):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = await self.crypto_bot.db.get_user(user_id)
        current_state = user['settings'].get('notifications', True)
        new_state = not current_state
        await self.crypto_bot.db.update_user_settings(user_id, {'notifications': new_state})
        return new_state
    
    async def show_interval_settings(self, callback: CallbackQuery, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        await callback.answer()
        user = await self.crypto_bot.db.get_user(user_id)
        current_interval = user['settings'].get('interval', '1H')
        
        intervals_list = ['15m', '1H', '4H', '1D']
        keyboard_buttons = []
        
        for i, interval in enumerate(intervals_list):
            if i % 2 == 0:
                keyboard_buttons.append([])
            status = "‚úÖ " if interval == current_interval else ""
            keyboard_buttons[-1].append(
                InlineKeyboardButton(
                    text=f"{status}{INTERVALS.get(interval, interval)}",
                    callback_data=f"settings_set_interval_{interval}"
                )
            )
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_main")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            "‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>\n\n"
            "–≠—Ç–æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –ø—Ä–æ–≥–Ω–æ–∑–µ",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    async def show_notification_settings(self, callback: CallbackQuery, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        await callback.answer()
        user = await self.crypto_bot.db.get_user(user_id)
        notifications_enabled = user['settings'].get('notifications', True)
        
        status_text = "–í–ö–õ ‚úÖ" if notifications_enabled else "–í–´–ö–õ ‚ùå"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({status_text})",
                callback_data="settings_notifications_toggle"
            )],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_main")]
        ])
        
        await callback.message.edit_text(
            "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤–æ–≤—Ä–µ–º—è",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    async def show_profile_settings(self, callback: CallbackQuery, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        await callback.answer()
        user = await self.crypto_bot.db.get_user(user_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data="stats_detailed")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_main")]
        ])
        
        profile_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"–ò–º—è: {user['first_name']}\n"
            f"Username: @{user['username']}\n"
            f"ID: {user_id}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['joined_at'][:10]}"
        )
        
        await callback.message.edit_text(
            profile_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    async def show_support_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        await callback.answer()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="settings_support_request")],
            [InlineKeyboardButton(text="‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="settings_feedback")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_main")]
        ])
        
        await callback.message.edit_text(
            "üÜò <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    async def show_detailed_stats(self, callback: CallbackQuery, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        await callback.answer()
        user = await self.crypto_bot.db.get_user(user_id)
        favorites = await self.get_user_favorites(user_id)
        
        stats_text = (
            f"üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user['first_name']}\n"
            f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user['joined_at'][:10]}\n"
            f"üîÆ <b>–í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:</b> {user['predictions_count']}\n"
            f"‚≠ê <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:</b> {len(favorites)}\n"
            f"‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b> {INTERVALS.get(user['settings']['interval'], user['settings']['interval'])}\n"
            f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if user['settings']['notifications'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n\n"
            f"<b>üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {user.get('daily_predictions', 0)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤\n"
            f"‚Ä¢ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è: {user.get('weekly_predictions', 0)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤\n"
            f"‚Ä¢ –≠—Ç–æ—Ç –º–µ—Å—è—Ü: {user.get('monthly_predictions', 0)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_detailed")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )