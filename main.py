import asyncio
from config import BOT_TOKEN, ADMIN_IDS, logger
from bot.bot_core import CryptoBot
from utils.managers import NotificationManager, AnalyticsManager

async def send_admin_stats(bot: CryptoBot, admin_id: int, analytics: AnalyticsManager):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        stats = await analytics.get_bot_statistics()
        
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üîÆ –í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {stats['total_predictions']}\n\n"
            f"‚≠ê <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:</b>\n"
        )
        
        for symbol, count in stats['popular_symbols']:
            stats_text += f"‚Ä¢ {symbol}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        
        await bot.bot.send_message(admin_id, stats_text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π BOT_TOKEN")
        return
    
    crypto_bot = CryptoBot(BOT_TOKEN)
    notification_manager = NotificationManager(crypto_bot.bot, crypto_bot.db)
    analytics_manager = AnalyticsManager(crypto_bot.db)
    
    tasks = [
        asyncio.create_task(crypto_bot.run()),
    ]
    
    async def admin_stats_task():
        while True:
            try:
                await asyncio.sleep(86400)
                for admin_id in ADMIN_IDS:
                    await send_admin_stats(crypto_bot, admin_id, analytics_manager)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_stats_task: {e}")
    
    try:
        await asyncio.gather(*tasks)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        notification_manager.stop_notifications()
        for task in tasks:
            task.cancel()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")